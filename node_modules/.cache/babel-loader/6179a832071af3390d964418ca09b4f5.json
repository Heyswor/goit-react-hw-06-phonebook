{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u0444\\\\Desktop\\\\\\u043E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435 GOIT\\\\goit-react-hw-04-phonebook\\\\src\\\\components\\\\ContactForm\\\\ContactForm.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport css from './ContactForm.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ContactForm(_ref) {\n  _s();\n\n  let {\n    onSumbit\n  } = _ref;\n  const [id, setId] = useState('');\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const {\n      name,\n      value,\n      id\n    } = event.currentTarget;\n    const uppercaseName = name.replace(name.charAt(0), name.charAt(0).toUpperCase());\n    console.log(value);\n    setId(id);\n    const dataFooName = 'set' + uppercaseName;\n    dataFoo[dataFooName](value);\n  };\n\n  const dataFoo = {\n    setId,\n    setName,\n    setNumber\n  }; // const data = {\n  //   id,\n  //   name,\n  //   number,\n  // };\n\n  const handleSumbmit = e => {\n    e.preventDefault();\n    onSumbit(data);\n    reset();\n  };\n\n  const reset = () => {\n    setId('');\n    setName('');\n    setNumber('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSumbmit,\n      className: css.contactForm,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"\",\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          id: nanoid(4),\n          type: \"text\",\n          name: \"name\",\n          value: name,\n          pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n          title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n          required: true,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"\",\n        children: [\"Number\", /*#__PURE__*/_jsxDEV(\"input\", {\n          id: nanoid(4),\n          type: \"tel\",\n          name: \"number\",\n          value: number,\n          pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",\n          title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n          required: true,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n} // export class ContactForm extends Component {\n//   state = {\n//     id: '',\n//     name: '',\n//     number: '',\n//   };\n// handleChange = event => {\n//   const { name, value, id } = event.currentTarget;\n//   this.setState({\n//     id: id,\n//     [name]: value,\n//   });\n// };\n//   handleSumbmit = e => {\n//     e.preventDefault();\n//     this.props.onSumbit(this.state);\n//     this.reset();\n//   };\n//   reset = () => {\n//     this.setState({\n//       id: '',\n//       name: '',\n//       number: '',\n//     });\n//   };\n//   render() {\n// return (\n//   <div>\n//     <form onSubmit={this.handleSumbmit} className={css.contactForm}>\n//       <label htmlFor=\"\">\n//         Name\n//         <input\n//           id={nanoid(4)}\n//           type=\"text\"\n//           name=\"name\"\n//           value={this.state.name}\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//           required\n//           onChange={this.handleChange}\n//         />\n//       </label>\n//       <label htmlFor=\"\">\n//         Number\n//         <input\n//           id={nanoid(4)}\n//           type=\"tel\"\n//           name=\"number\"\n//           value={this.state.number}\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//           required\n//           onChange={this.handleChange}\n//         />\n//       </label>\n//       <button type=\"submit\">Add contact</button>\n//     </form>\n//   </div>\n// );\n//   }\n// }\n\n_s(ContactForm, \"51VND3gjAcPLwklGRq619pv5EpI=\");\n\n_c = ContactForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"sources":["C:/Users/ф/Desktop/обучение GOIT/goit-react-hw-04-phonebook/src/components/ContactForm/ContactForm.jsx"],"names":["useState","nanoid","css","ContactForm","onSumbit","id","setId","name","setName","number","setNumber","handleChange","event","value","currentTarget","uppercaseName","replace","charAt","toUpperCase","console","log","dataFooName","dataFoo","handleSumbmit","e","preventDefault","data","reset","contactForm"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport css from './ContactForm.module.css';\r\n\r\nexport function ContactForm({ onSumbit }) {\r\n  const [id, setId] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleChange = event => {\r\n    const { name, value, id } = event.currentTarget;\r\n    const uppercaseName = name.replace(\r\n      name.charAt(0),\r\n      name.charAt(0).toUpperCase()\r\n    );\r\n    console.log(value);\r\n    setId(id);\r\n    const dataFooName = 'set' + uppercaseName;\r\n    dataFoo[dataFooName](value);\r\n  };\r\n\r\n  const dataFoo = {\r\n    setId,\r\n    setName,\r\n    setNumber,\r\n  };\r\n\r\n  // const data = {\r\n  //   id,\r\n  //   name,\r\n  //   number,\r\n  // };\r\n\r\n\r\n  const handleSumbmit = e => {\r\n    e.preventDefault();\r\n\r\n    onSumbit(data);\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setId('');\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSumbmit} className={css.contactForm}>\r\n        <label htmlFor=\"\">\r\n          Name\r\n          <input\r\n            id={nanoid(4)}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n            required\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n\r\n        <label htmlFor=\"\">\r\n          Number\r\n          <input\r\n            id={nanoid(4)}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n            required\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\n// export class ContactForm extends Component {\r\n//   state = {\r\n//     id: '',\r\n//     name: '',\r\n//     number: '',\r\n//   };\r\n\r\n// handleChange = event => {\r\n//   const { name, value, id } = event.currentTarget;\r\n//   this.setState({\r\n//     id: id,\r\n//     [name]: value,\r\n//   });\r\n// };\r\n\r\n//   handleSumbmit = e => {\r\n//     e.preventDefault();\r\n\r\n//     this.props.onSumbit(this.state);\r\n//     this.reset();\r\n//   };\r\n\r\n//   reset = () => {\r\n//     this.setState({\r\n//       id: '',\r\n//       name: '',\r\n//       number: '',\r\n//     });\r\n//   };\r\n\r\n//   render() {\r\n// return (\r\n//   <div>\r\n//     <form onSubmit={this.handleSumbmit} className={css.contactForm}>\r\n//       <label htmlFor=\"\">\r\n//         Name\r\n//         <input\r\n//           id={nanoid(4)}\r\n//           type=\"text\"\r\n//           name=\"name\"\r\n//           value={this.state.name}\r\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n//           required\r\n//           onChange={this.handleChange}\r\n//         />\r\n//       </label>\r\n\r\n//       <label htmlFor=\"\">\r\n//         Number\r\n//         <input\r\n//           id={nanoid(4)}\r\n//           type=\"tel\"\r\n//           name=\"number\"\r\n//           value={this.state.number}\r\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n//           required\r\n//           onChange={this.handleChange}\r\n//         />\r\n//       </label>\r\n//       <button type=\"submit\">Add contact</button>\r\n//     </form>\r\n//   </div>\r\n// );\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}